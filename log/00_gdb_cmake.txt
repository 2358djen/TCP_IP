#include <winsock2.h>
#pragma comment(lib,"ws2_32.lib")
shell <shell command>       调用shell命令
file a.out                  读取a.out
list                        查看源代码
r(run)                      运行
b(break point)              断点(b func,b line)
d                           删除断点
info b                      查看断点
c(continue)                 继续(after stopping or at a break point)
n(next)                     下一行
p(print)                    打印(p 表达式)
s(step)                     跟进函数

set logging on              打开日志记录

观察点:
p &i 
0x7fffffffdec0
watch *  0x7fffffffdec0
info watchpoints

core文件
ulimit -a 
ulimit -c unlimited

set var 变量 = 新值          为变量设置值
display 变量                每一步都显示变量值
info display
undisplay 编号              取消display





g++ 调试参数

-g      产生带调试信息的可执行文件
-O[n]   代码优化
        -O0不优化
        -O1默认优化
        -O2包括一些指令调整
        -O3(危险)包括循环展开和一些处理特性相关的调整

-l      链接库,直接链接 /usr/lib,/usr/local/lib 的库,比如-lglog
-L      链接自定义的第三方库,如 -L/home/haha/test -lterst
-I      指定自定义的头文件包含目录

-Wall   编译时显示警告信息
-w      关闭警告信息
-std=   指定编译标准,比如 -std=gnu11 -std=c++11
-D      指定宏


生成静态库(.a)
1.生成object文件: gcc -c head.c -I inc -std=gnu11 -o head.o
2.生成静态库文件:  ar rs libhead.a head.o
3.使用静态库文件:  gcc main.c -l head -L src -I inc -o main
  注意: head.c(只有函数声明) 同时被 main.c 和 head.c(含有函数的实现方法) 包含,我们制作的是 head.c 的静态库

生成动态库(.so)
1.生成动态库文件:  gcc head.c -I inc -std=gnu11 -fPIC -shared -o libhead.so
                 (或者)
                 gcc -c head.c -I inc -fPIC -o head.o
                 gcc -shared head.o -o libhead.so

2.使用动态库文件:  gcc -l head -L src -I inc -o main
3.运行            LD_LIBRARY_PATH=inc ./main



Cmake

[基本语法]
    指令(参数1 参数2 ...)    #参数使用括号括起来,参数之间使用空格或者封号隔开,指令大小写无关,参数和变量大小写相关

[变量]
    set(HELLO hello.cpp)  #设置HELLO
    ${HELLO}              #取值
                          #在IF语句中直接使用变量的名字

[重要指令]
    1.设定最小版本
    cmake_minimum_required(VERSION versionNumber [FATAL_ERROR])
    cmake_minimum_required(VERSION 2.8.3)

    2.设定项目名称
    project(projectname [CXX][C][Java])
    project(HELLOWORLD)

    3.设定变量
    set(VAR [VALUE][CACHE TYPE DOCSTRING [FORCE]])
    set(SRC sayhello.cpp hello.cpp)

    4.设定包含文件夹
    include_directories([AFTER|BEFORE][SYSTEM] dir1 dir2 ...)       #gcc -I...
    include_directories(./inc /usr/include)

    5.设定库文件夹
    link_directories(dir1 dir2 ...)                                 #gcc -L
    link_directories(./lib /usr/lib)

    6.生成库
    add_library(libname [SHARED|STATIC|MODULE][EXCLUDE_FROM_ALL] source1 source2 ...)
    add_library(hello SHARED ${SRC})                                #利用SRC生成libhello.so动态库

    7.设定编译参数
    add_compile_options(<option> ...)
    add_compile_options(-Wall -std=gnu11 -O2)

    8.生成可执行文件
    add_executable(exename source1 source2 ...)
    add_executable(main main.cpp)

    9.链接库
    target_link_libraries(target library1<debug|optimized> library2 ...)
    target_link_libraries(main hello)                               #gcc -l ...

    10.添加源文件子目录
    add_subdirectory(source_dir [binary_dir][EXCLUDE_FROM_ALL])     #子目录中应当存在 CMakeLists.txt 文件
    add_subdirectory(src)

    11.将一个目录下所有的源文件并列储存在一个表变量中,这个指令临时被用来自动构建源文件列表
    aux_source_directory(dir VARIABLE)
    aux_source_directory(. SRC)


[常用变量]
    1.gcc编译选项
    CMAKE_C_FLAGS
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu11")

    2.g++编译选项
    CMAKE_CXX_FLAGS

    3.编译类型(Debug,Release)
    CMAKE_BUILD_TYPE
    set(CMAKE_BUILD_TYPE Debug) 

    4.
    CMAKE_BINARY_DIR
    PROJECT_BINARY_DIR
    <projectname>_BINARY_DIR
    这三个变量指代的内容是一致的
    如果是 in source build,指的就是工程顶层目录
    如果是 out of source 编译,指的就是工程编译发生的目录
    
    5.
    CMAKE_SOURCE_DIR
    PROJECT_SOURCE_DIR
    <projectname>_SOURCE_DIR
    这三个变量指代的内容是一致的,都是工程顶层目录
    也就是在 in source build 时,它和 CMAKE_BINARY_DIR 等变量一致

    6.指定C编译器
    CMAKE_C_COMPILER

    7.指定C++编译器
    CMAKE_CXX_COMPILER

    8.可执行文件输出的存放路径
    EXECUTABLE_OUTPUT_PATH

    9.库文件输出的存放路径
    LIBRARY_OUTPUT_PATH


[编译流程]
    1.手动编写CMakeLists.txt文件
    2.执行 cmake PATH 生成 MakeFile
    3.执行 make


[构建方式]
    1.内部构建(in source build)
    会在同级目录产生一大堆中间文件,这些中间文件并不是我们最终需要的
    和工程源文件放在一起会显的杂乱无章
    $ cmake .
    $ make

    2.外部构建(out of source build)
    将编译输出文件和源文件发在不同位置
    $ mkdir build && cd build
    $ cmake ..
    $ make