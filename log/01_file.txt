#include "../include/func.h"


打开文件:文件名的字符串地址+文件打开模式
#include <sys/types.h, sys/stat.h, fcntl.h>//只是为了省空间
int open(const char * path,int flag);

        // O_CREAT         必要时创建文件
        // O_TRUNC         删除全部现有数据
        // O_APPEND        维持现有数据,保存到其后面(追加)
        // O_RDONLY        只读打开
        // O_WRONLY        只写打开
        // O_RDWR          读写打开

        // 传递多个参数时, 按 "位" 或(OR) 运算组合传递
成功:文件描述符,失败:-1

关闭文件:文件的描述符
#include <unistd.h>
int close(int fd);
        成功:0,失败:-1

写文件:文件描述符+需要传输数据的缓存地址值+需要传输数据的字节数
#include <unistd.h>
ssize_t write(int fd, const void * buf,size_t nbytes);
        成功:写入文件的字符数,失败:-1
        size_t = unsigned int, ssize_t = signed int //(_t表示操作系统定义的)

读文件:文件描述符+需要保存接收数据的缓冲地址值+要接受的最大字节数
#include <unistd.h>
ssize_t read(int fd,void * buf, size_t nbytes);
        成功:接收的字节数,失败:-1

open()可以创建和打开包含路径的不带扩展名的文件
同一文件连续读写操作:在每一次小操作步骤后关闭文件并重新打开再执行下一个小操作步骤
                 或者在下一个操作步骤前使用open()重新创建文件一个描述符(文件同时具有多个活动的描述符)
                 实验证明只用一个描述符:
                                        写入后读取不可
                                        读取后写入可以
                                        读取后读取可以
                                        写入后写入可以
最后:严格控制传输位数,否则会出现乱码