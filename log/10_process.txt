[ 基本概念 ]
    进程是流的基本单位
    CPU核心数=可同时运行的进程数
    进程ID:即PID,由操作系统分配大于2的整数(0=idle  1=init 2=kthreadd)


#include <unistd.h>
pid_t fork(void)
    成功:PID,失败:-1

    复制当前正在运行的,调用fork函数的进程
    两个进程都将在fork函数返回后执行其之后的语句

    "两片空间,两个fork返回值"
    父进程(原主进程):fork返回子进程的PID
    子进程(镜像进程):fork返回0

    对于套接字,fork复制了其文件描述符(套接字归于操作系统,无法复制)
    而只有当套接字的所有文件描述符都被销毁时套接字才会被销毁,因此子父进程要关闭无关文件描述符,

[ 僵尸进程 ]
    子进程在执行 return 语句或者 exit 语句时不会立即被操作系统销毁(其值传向操作系统)
    直到将值传递给父进程
    除非主父进程主动要求获得子进程的状态值,否则操作系统将一直保存,并让子进程长时间处于僵尸进程状态

    为了消灭僵尸进程,父进程应主动请求调用获取子进程的返回值



#include <sys/wait.h>
pid_t wait(int * statloc);
    成功:终止的子进程PID,失败:-1

    调用此函数时如果已有子进程终止,那么子进程的状态就会保存到该函数参数所指向的内存空间,statloc中包括(宏):
    -> WIFEXITED:   子进程正常终止时返回真 (true)
    -> WEXITSTATUS: 返回子进程的结束值

    -> WIFSIGNALED: 若子进程是因为信号结束的则为真
    -> WTERMSIG:    取得子进程因信号终止的信号代码

    -> WIFSTOPPED:  如果子进程处于暂停状态则为真
    -> WSTOPSIG:    取得引发子进程暂停的信号代码
    "调用该函数时程序将会阻塞,直到有子进程终止,因此需要谨慎调用"

pid_t waitpid(pid_t pid,int statloc,int options);
    成功:终止的子进程PID(无终止子进程:0),失败:-1

    pid:    等待终止的目标子进程的ID,若传递-1,则与wait函数相同,可以等待任意进程终止
    statloc:与wait函数的statloc参数含义相同
    options:传递头文件 sys/wait.h 中声明的常量 WNOHANG,即使没有终止的子进程也不会进入阻塞状态,而是返回0并退出函数
                                           WUNTRACED,如果子进程进入暂停执行状态则马上返回,但结束状态不予理会


