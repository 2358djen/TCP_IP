#include <signal.h>

[ '信号捕捉'函数 ]

void ( * signal(int signo,void (* func)(int)))(int);
    "当发生信号signo时,执行动作func"
    [返回值]成功:返回以前的信号处理配置,失败:SIG_ERR
        #define SIG_ERR (void (*)())   -1
        #define SIG_DFL (void (*)())    0
        #define SIG_IGN (void (*)())    1

    函数名称:   signal
    参数列表:   int signo,void (* func)(int)
    返回类型:   void (*)(int)

    人生总结:   这是一个以"整形变量 'signo' 和函数指针变量 'func' "为参数,
               返回值为"以'整形变量'为参数,返回类型为'void'的函数指针"的函数signal

    signo:     信号宏常数(如下)
    *func:     SIG_DFL(默认动作) 或 SIG_IGN(忽略信号) 或 函数(地址)(以signo为参数)

        常见信号:
        SIGALRM:    已到'通过调用alarm函数注册'的时间
        SIGCHLD:    子进程终止信号
        SIGFPE:     数学相关的异常,如除0错误,浮点溢出,等等
        SIGSEGV:    非法内存访问
        SIGINT:     中断信号,一般是Ctrl+C.发送给所有前台的进程
        SIGTSTP:    挂起信号,一般是Ctrl+Z.发送给所有前台的进程
        SIGQUIT:    退出信号,一般是CTRL+/.发送给所有前台的进程
        ...

#include <unistd.h>
unsigned int alarm(unsigned int seconds);
    返回0 或者 以秒为单位的'距离SIGALRM信号发生所剩余的'时间

    调用函数后,经过seconds秒后产生SIGALRM信号
    若seconds=0,则之前对SIGALRM信号的预约将取消
    如果通过该函数预约信号后未指定信号对应的处理函数,则(通过调用signal函数)终止进程,不做任何处理

[ 特别说明 ]
    当进程调用sleep函数进入睡眠状态就无法调用函数
    因此当信号发生时为了调用信号处理器就将进程唤醒
    并且进程一旦唤醒就不会再次进入睡眠状态(仅仅跳过本次sleep),即使未达到规定的睡眠时间


int sigaction(int signo,const struct sigaction * act,struct sigaction * oldact);
    成功:0,失败:-1

    signo:  与signal函数相同,传递信号信息
    act:    对应于第一个参数的信号处理函数(信号处理器)信息
    oldact: 通过此参数获取之前注册的信号处理函数指针,若不需要则传递0

    struct sigaction
    {
        void (*sa_handler)(int);    // 保存信号处理函数的指针值
        sigset_t sa_mask;           // 在信号处理程序执行过程中哪些信号应当被阻塞 默认当前信号本身被阻塞
        int sa_flags;
        // 包含了许多标志位.比较重要的一个是SA_SIGINFO,当设定了该标志位时,表示信号附带的参数可以传递到信号处理函数中.
        // 如果不设置SA_SIGINFO,信号处理函数同样不能得到信号传递过来的数据,在信号处理函数中对这些信息的访问都将导致段错误
    }

    子进程终止时将产生SIGCHLD信号