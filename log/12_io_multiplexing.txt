[ (时分)复用技术 ]

    "为了提高物理设备的效率,用最少的物理要素传递最多数据时使用的技术"
    "在1个通信频道中传递多个数据(信号)的技术"


select函数:将多个文件描述符集中到一起统一监视
    ->是否存在在套接字接收数据?
    ->无需阻塞传输数据的套接字有哪些?
    ->那些套接字发生了异常?
    发生监视项对应的情况时,称"发生了事件"


    使用步骤:
    步骤一:
            1.设置文件描述符

                fd_set是存有0和1的位数组,"位为1表示是监视对象"
                FD_ZERO(fd_set * fdset)        将fdset变量所有位初始化为0
                FD_SET(int fd,fd_set * fdset)   向fdset变量中注册fd的信息
                FD_CLR(int fd,fd_set * fdset)   从fdset变量中清除fd的信息
                FD_ISSET(int fd,fd_set * fdset) 检测fdset中是否注册fd信息,返回布尔值

            2.指定监视范围

                #include <sys/select.h>
                #include <sys/time.h>
                int select (int maxfd,fd_set * readset,fd_set * writeset,fd_set * exceptset,const struct timeval * timeout)
                成功:大于0的值,失败:-1
            
                maxfd       监视对象文件描述符的数量(+1 "文件描述符从0开始")
                readset     将所有关注"是否存在待读取数据"的文件描述符注册到fd_set型变量,并传递其地址值
                writeset    将所有关注"是否存在可传输无阻塞数据"的文件描述符注册到fd_set型变量,并传递其地址值
                exceptset   将所有关注"是否存在异常"的文件描述符注册到fd_set型变量,并传递其地址值
                timeout     调用select函数时,为防止陷入无限阻塞的状态,传递超时(time-out)信息,若不想设置超时,则传递NULL
                返回值       发生错误返回-1,超时返回0,因发生关注的事件返回时,返回大于0的值,该值是发生事件的文件描述符数        

            3.设置超时

                struct timeval
                {
                    long tv_sec;    //seconds
                    long tv_usec;   //micro-seconds
                }
                即使文件描述符未发生变化,只要过了指定事件,也可以从函数中返回(传递NULL不设置超时)
                tv_sec和tv_usec在使用select后就会变成"剩余时间",因此每次调用select前都要初始化


    步骤二:
            4.调用select函数
    步骤三:
            5.查看调用结果
                "文件描述符的变化: 指被监视的文件描述符中发生了监视事件"
                调用select函数后,向其传递的fd_set变量中将会发生变化
                原来所有为1的位均变为0,但发生变化的文件描述符对应位除外
                因此可认为值仍为1的位置上的文件描述符发生了变化

