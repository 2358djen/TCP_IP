[ select优缺点 ]
    兼容性好,大部分操作系统都支持select

    但是每次调用select函数时都要向操作系统传递监视对象信息
    对应用程序造成很大负担,且无法通过代码优化解决,因此成为性能的致命弱点

[ epoll优点 ]
    无需编写以监视变化状态为目的针对所有文件描述符的循环语句
    调用对应于select函数的epoll_wait函数时无需每次传递监视对象

[ epoll基本概念 ]
    
    epoll_create:   (向操作系统)申请创建保存文件描述符的空间
    epoll_ctl:      向空间注册并注销文件描述符
    epoll_wait:     与select类似,等待文件描述符变化

    添加和删除文件描述符
        select: FD_SET,FD_CLR
        epoll:  epoll_ctl
    等待变化
        select: select函数
        epoll:  epoll_wait函数
    集中监视变量
        select: fd_set变量
        epoll:  epoll_event变量

    struct epoll_event
    {
        __uint32_t      events;
        epoll_data_t    data;
    }

    typedef union epoll_data
    {
        void * ptr;
        int fd;
        __uint32_t u32;
        __uint64_t u64;
    }epoll_data_t;

    声明足够大的epoll_event结构体数据,传递给epoll_wait函数
    发生变化的文件描述符符将被填入该数组

[ epoll相关定义 ]
    epoll是从Linux的2.5.44内核开始引入的
    cat /proc/sys/kernel/osrelease 查看内核版本


#include <sys/epoll.h>
int epoll_create(int size)
    成功:epoll文件描述符,失败:-1
    
    size:   epoll实例的大小
    注意:调用epoll_create函数创建的文件描述符保存空间成为"epoll例程"(有时不同)
        通过size传递的值决定epoll例程的大小,但这只是向操作系统提的建议,仅供系统参考
        并且在Linux 2.6.8 之后的内核将完全忽略size参数
        epoll_create创建的资源与套接字相同,也由操作系统管理,终止时需要调用close函数


int epoll_ctl(int epfd,int op,int fd,struct epoll_event * event)
    成功:0,失败:-1

    epfd:   用于注册监视对象的epoll例程的文件描述符
    op:     用于指定监视对象的添加,删除,修改等操作
                EPOLL_CTL_ADD
                EPOLL_CTL_DEL
                EPOLL_CTL_MOD
    fd:     需要注册的监视对象文件描述符
    event:  监视对象的事件类型

    举例:
    epoll_ctl(A,EPOLL_CTL_ADD,B,C);     "向例程A中注册描述符B,目的事件是C"
    epoll_ctl(A,EPOLL_CTL_DEL,B,NULL);  "从例程A中删除B"(Linux 2.6.9 之前不允许传递NULL)

    第四个参数epoll_event结构体可以设置关注事件,也可以保存发生事件的文件描述符的集合

    epoll_event.events:
        EPOLLIN:        需要读取数据的情况
        EPOLLOUT:       输出缓冲为空,可以立即发送数据的情况
        EPOLLPRI:       收到OOB数据的情况
        EPOLLRDHUP:     断开连接或半关闭的情况,这在边缘触发方式下非常有用
        EPOLLERR:       发生错误的情况
        EPOLLET:        以边缘触发方式得到事件通知
        EPOLLONESHOT:   发生一次事件后,相应文件描述符符不再收到通知
                        因此需要向epoll_ctl函数的第二个参数传递EPOLL_CTL_MOD,在此设置事件


int epoll_wait(int epfd,struct epoll_event * events,int maxevents,int timeout)
    成功:发生事件的文件描述符数,失败-1

    epfd:       表示事件发生监视范围的epoll例程的文件描述符符
    events:     保存发生事件的文件描述符集合的结构体地址值
    maxevents:  第二个参数中可以保存的最大事件数
    timeout:    以毫秒为单位的等待时间,传递-1时表示一直等待直到事件发生

[ 使用过程简单演示 ]

    struct epoll_event * ep_events;     // epoll_wait   用以保存发生事件的描述符
    struct epoll_event event;           // epoll_ctl    用以设定监视事件

    int epfd = epoll_create(EPOLL_SIZE);// 创建例程

    event.events = EPOLLIN|EPOLLOUT;
    event.data.fd = sockfd;
    epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,&event);                    // 注册

    ep_events = (struct epoll_event *)malloc(sizeof(struct epoll_event)*EPOLL_SIZE);
    int event_cnt = epoll_wait(epfd,ep_events,EPOLL_SIZE,-1);       // 监视
    
[ 条件触发 ]

    "只要输入缓冲有数据就会一直通知该事件"
    例如:输入缓冲中存在50字节(注册事件),机器读取了20字节,还剩30字节(仍然注册事件)
    实验:调小BUF_SIZE数值,不让机器一次性读取完缓冲
    另外,select函数也是条件触发模型

[ 边缘触发 ]

    "输入缓冲收到数据时仅注册一次该事件"

    1.通过errno变量验证错误原因
        头文件error.h中包含int errno
        每当各种函数发生错误时,保存到errno变量的值都不同
        比如:read函数在输入缓冲中没有发现数据时返回-1,同时在errno中保存EAGAIN产量 
    2.更改套接字特性,完成非阻塞IO
        #include<fcntl.h>
        int fcntl(int filedes,int cmd,...)
        成功:cmd参数相关值,失败:-1
        filedes:    属性更改目标的文件描述符
        cmd:        表示函数调用的目的
                    F_GETFL获取属性
                    F_SETFL设定属性

        int flag = fcntl(fd,F_GETFL,0);
        fcntl(fd,F_SETFL,flag|O_NONBLOCK)
        这样表示在原有属性上加上非阻塞属性
        